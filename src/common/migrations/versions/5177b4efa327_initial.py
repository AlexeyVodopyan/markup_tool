"""'initial'

Revision ID: 5177b4efa327
Revises:
Create Date: 2022-11-21 12:54:27.200470

"""
# thirdparty
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "5177b4efa327"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "label_class",
        sa.Column(
            "id", sa.Integer(), autoincrement=True, nullable=False, comment="ID класса"
        ),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Дата создания",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "task",
        sa.Column(
            "id", sa.Integer(), autoincrement=True, nullable=False, comment="ID задачи"
        ),
        sa.Column("name", sa.String(), nullable=True, comment="Название задачи"),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Дата создания",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tg_user",
        sa.Column("login", sa.String(), nullable=False, comment="Логин"),
        sa.Column(
            "password_hashed",
            sa.String(),
            nullable=False,
            comment="Зашифрованный пароль",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Дата создания",
        ),
        sa.PrimaryKeyConstraint("login"),
    )
    op.create_table(
        "image",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="ID изображения",
        ),
        sa.Column("file_path", sa.String(), nullable=False, comment="Путь к файлу"),
        sa.Column("task_id", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Дата создания",
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["task.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("file_path"),
    )
    op.create_table(
        "task_label_class",
        sa.Column("id", sa.Integer(), nullable=False, comment="ID записи"),
        sa.Column("task_id", sa.Integer(), nullable=True),
        sa.Column("label_class_id", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Дата создания",
        ),
        sa.ForeignKeyConstraint(
            ["label_class_id"],
            ["label_class.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["task.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "task_tg_user",
        sa.Column("id", sa.Integer(), nullable=False, comment="ID записи"),
        sa.Column("task_id", sa.Integer(), nullable=True),
        sa.Column("tg_login", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Дата создания",
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["task.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tg_login"],
            ["tg_user.login"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "labeled_image",
        sa.Column(
            "id", sa.Integer(), autoincrement=True, nullable=False, comment="ID записи"
        ),
        sa.Column("image_id", sa.Integer(), nullable=False),
        sa.Column("tg_login", sa.String(), nullable=False),
        sa.Column("label_id", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Дата создания",
        ),
        sa.ForeignKeyConstraint(
            ["image_id"],
            ["image.id"],
        ),
        sa.ForeignKeyConstraint(
            ["label_id"],
            ["label_class.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tg_login"],
            ["tg_user.login"],
        ),
        sa.PrimaryKeyConstraint("id", "image_id", "tg_login"),
    )
    op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto;")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP EXTENSION IF EXISTS pgcrypto;")
    op.drop_table("labeled_image")
    op.drop_table("task_tg_user")
    op.drop_table("task_label_class")
    op.drop_table("image")
    op.drop_table("tg_user")
    op.drop_table("task")
    op.drop_table("label_class")
    # ### end Alembic commands ###
